@model IEnumerable<CartItem>
@using System.Globalization
@{
    var culture = CultureInfo.InvariantCulture;
}

<div class="d-flex flex-column h-100">
    @if (Model.Any())
    {
        <div class="slide-cart-body flex-grow-1">
            @foreach (var item in Model)
            {
                <div class="slide-cart-item" id="slide-cart-item-@item.Id">
                    <img src="@(string.IsNullOrEmpty(item.Product.ImageUrl) ? $"https://placehold.co/100x100/F4E1E6/A64B63?text=Item" : item.Product.ImageUrl)" alt="@item.Product.Name" class="item-image">
                    <div class="item-details">
                        <h6 class="item-title">@item.Product.Name</h6>
                        <div class="item-meta">
                            <span class="numeric-value">@item.Quantity.ToString("N0", culture) x </span>
                            <span class="item-price numeric-value">@item.Product.Price.ToString("C")</span>
                        </div>
                    </div>
                    <button type="button" class="btn btn-sm btn-remove remove-from-cart-btn" data-id="@item.Id" title="إزالة المنتج">&times;</button>
                </div>
            }
        </div>
        <div class="slide-cart-footer">
            <div class="d-flex justify-content-between fw-bold mb-3">
                <span>الإجمالي:</span>
                <span class="numeric-value">@Model.Sum(i => i.Quantity * i.Product.Price).ToString("C")</span>
            </div>
            <div class="d-grid gap-2">
                <a asp-controller="Cart" asp-action="Index" class="btn btn-outline-main">عرض السلة</a>
                <a asp-controller="Checkout" asp-action="Index" class="btn-main text-center">إتمام الطلب</a>
            </div>
        </div>
    }
    else
    {
        <div class="text-center my-auto">
            <i class="bi bi-cart-x" style="font-size: 4rem; color: var(--accent-color);"></i>
            <h5 class="mt-3">سلتك فارغة</h5>
            <p class="text-muted">أضف بعض المنتجات لتبدأ.</p>
        </div>
    }
</div>

<script>
    (function() {
        // This function will run every time this partial view is loaded or reloaded via AJAX.
        const toEasternArabicNumerals = (str) => {
            if (str === null || str === undefined) return '';
            let numStr = String(str);
            const arabicNumerals = ['٠', '١', '٢', '٣', '٤', '٥', '٦', '٧', '٨', '٩'];
            return numStr.replace(/[0-9]/g, w => arabicNumerals[+w]).replace('.', '٫');
        };

        // Find all elements with the 'numeric-value' class within the slide cart and convert their numbers.
        document.querySelectorAll('#slideCart .numeric-value').forEach(function(element) {
            element.textContent = toEasternArabicNumerals(element.textContent);
        });

        // Attach click event listeners to the remove buttons
        document.querySelectorAll('#slideCart .remove-from-cart-btn').forEach(function(button) {
            button.addEventListener('click', function(e) {
                e.preventDefault();
                const itemId = this.getAttribute('data-id');
                const token = document.querySelector('#__AjaxAntiForgeryForm input[name="__RequestVerificationToken"]').value;

                // Use jQuery for the AJAX call as it's used elsewhere in the project
                $.ajax({
                    type: 'POST',
                    url: '/Cart/RemoveFromCart',
                    data: {
                        __RequestVerificationToken: token,
                        id: itemId
                    },
                    success: function(response){
                        if(response.success){
                            // Instead of calling an external function, just re-fetch the cart state.
                            $.get('/Cart/GetCartState', function (cartResponse) {
                                if (cartResponse.success) {
                                    // Replace the entire offcanvas body content
                                    $('#slide-cart-body').html(cartResponse.html);
                                    // Update the main cart badge in the header
                                    $('#cart-badge').text(toEasternArabicNumerals(cartResponse.cartCount));
                                    // Add a visual cue to the badge
                                    const badge = $('#cart-badge');
                                    badge.addClass('updated');
                                    setTimeout(() => badge.removeClass('updated'), 300);
                                }
                            });
                        } else {
                            console.error("Error removing item from cart:", response.message);
                        }
                    },
                    error: function() {
                         console.error("Failed to connect to server to remove item.");
                    }
                });
            });
        });

    })();
</script>
