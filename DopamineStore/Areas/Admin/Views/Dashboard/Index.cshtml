@model DashboardViewModel
@using System.Globalization
@using System.Text
@functions {
    // Function to convert Latin numerals (0-9) to Eastern Arabic numerals (٠-٩)
    public static string ToArabicNumerals(string input)
    {
        if (string.IsNullOrEmpty(input)) return "";
        return new StringBuilder(input)
            .Replace('0', '٠')
            .Replace('1', '١')
            .Replace('2', '٢')
            .Replace('3', '٣')
            .Replace('4', '٤')
            .Replace('5', '٥')
            .Replace('6', '٦')
            .Replace('7', '٧')
            .Replace('8', '٨')
            .Replace('9', '٩').ToString();
    }
}
@{
    // Set culture for currency and date formatting
    var arabicCulture = new CultureInfo("ar-EG");
}
@{
    ViewData["Title"] = "لوحة التحكم الرئيسية";
    var currentCulture = CultureInfo.CurrentUICulture;
    // Generate month labels for the last 12 months in the current UI culture
    var monthLabels = Enumerable.Range(0, 12)
        .Select(i => DateTime.Now.AddMonths(-(11 - i)).ToString("MMMM", currentCulture))
        .ToList();
    // Generate day labels for the last 7 days in the current UI culture
    var dayLabels = Enumerable.Range(0, 7)
        .Select(i => DateTime.Now.AddDays(-(6 - i)).ToString("dddd", currentCulture))
        .ToList();
}

<!-- Low Stock Warning Alert -->
@if (TempData["LowStockWarning"] != null)
{
    <div class="alert alert-warning">
        <div>
            <p class="alert-title"><i class="fas fa-exclamation-triangle"></i>تنبيهات انخفاض المخزون!</p>
            <p>@Html.Raw(TempData["LowStockWarning"])</p>
        </div>
        <button onclick="this.parentElement.style.display='none'" class="alert-close-btn">&times;</button>
    </div>
}

<div class="page-header">
    <h1>@ViewData["Title"]</h1>
</div>

<!-- Statistics Cards Grid -->
<div class="dashboard-grid grid-cols-4">
    <div class="stat-card">
        <div class="stat-card-header">
            <div class="stat-card-icon-wrapper"><i class="fas fa-dollar-sign"></i></div>
            <p class="stat-card-title">إجمالي المبيعات</p>
        </div>
        <p class="stat-card-value">@ToArabicNumerals(Model.TotalSales.ToString("C0", arabicCulture))</p>
    </div>
    <div class="stat-card">
        <div class="stat-card-header">
            <div class="stat-card-icon-wrapper"><i class="fas fa-calendar-day"></i></div>
            <p class="stat-card-title">مبيعات اليوم</p>
        </div>
        <p class="stat-card-value">@ToArabicNumerals(Model.SalesToday.ToString("C0", arabicCulture))</p>
    </div>
    <div class="stat-card">
        <div class="stat-card-header">
            <div class="stat-card-icon-wrapper"><i class="fas fa-clipboard-list"></i></div>
            <p class="stat-card-title">إجمالي الطلبات</p>
        </div>
        <p class="stat-card-value">@ToArabicNumerals(Model.TotalOrders.ToString("N0"))</p>
    </div>
    <div class="stat-card">
        <div class="stat-card-header">
            <div class="stat-card-icon-wrapper"><i class="fas fa-chart-pie"></i></div>
            <p class="stat-card-title">متوسط قيمة الطلب</p>
        </div>
        <p class="stat-card-value">@ToArabicNumerals(Model.AverageOrderValue.ToString("C0", arabicCulture))</p>
    </div>
</div>

<!-- Charts Grid -->
<div class="dashboard-grid grid-cols-2">
    <div class="dashboard-card">
        <div class="card-header"><i class="fas fa-chart-area"></i>المبيعات خلال آخر 12 شهر</div>
        <div class="card-body"><div class="chart-container"><canvas id="monthlySalesChart"></canvas></div></div>
    </div>
    <div class="dashboard-card">
        <div class="card-header"><i class="fas fa-chart-bar"></i>المبيعات خلال آخر 7 أيام</div>
        <div class="card-body"><div class="chart-container"><canvas id="dailySalesChart"></canvas></div></div>
    </div>
</div>

<!-- Top Categories & Products Grid -->
<div class="dashboard-grid grid-cols-2">
    <div class="dashboard-card">
        <div class="card-header"><i class="fas fa-tags"></i>الأقسام الأكثر مبيعاً</div>
        <div class="card-body"><div class="chart-container"><canvas id="categorySalesChart"></canvas></div></div>
    </div>
    <div class="dashboard-card">
        <div class="card-header"><i class="fas fa-fire"></i>المنتجات الأكثر مبيعاً</div>
        <div class="card-body">
            <ul class="list">
                @foreach (var product in Model.TopSellingProducts)
                {
                    <li class="list-item">
                        <div class="list-item-info">
                            <img src="@(string.IsNullOrEmpty(product.ImageUrl) ? "https://placehold.co/100x100/A64B63/fceef2?text=P" : product.ImageUrl)" class="list-item-img" alt="Product Image">
                            <span class="list-item-name">@product.ProductName</span>
                        </div>
                        <span class="list-item-value value-accent">@ToArabicNumerals(product.UnitsSold.ToString("N0")) قطعة</span>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>

<!-- Top Customers & Order Status Grid -->
<div class="dashboard-grid grid-cols-2">
    <div class="dashboard-card">
        <div class="card-header"><i class="fas fa-crown"></i>أفضل العملاء</div>
        <div class="card-body">
            <ul class="list">
                @foreach (var customer in Model.TopCustomers)
                {
                    <li class="list-item">
                        <span class="list-item-name">@customer.CustomerName</span>
                        <span class="list-item-value value-primary">@ToArabicNumerals(customer.TotalSpent.ToString("C0", arabicCulture))</span>
                    </li>
                }
            </ul>
        </div>
    </div>
    <div class="dashboard-card">
        <div class="card-header"><i class="fas fa-tasks"></i>توزيع حالات الطلبات</div>
        <div class="card-body doughnut-chart-wrapper">
            <div class="chart-container" style="min-height: 240px;"><canvas id="orderStatusChart"></canvas></div>
        </div>
    </div>
</div>

<!-- Recent Orders Table -->
<div class="dashboard-card">
    <div class="card-header"><i class="fas fa-history"></i>آخر الطلبات</div>
    <div class="card-body">
        <div class="table-wrapper">
            <table class="table orders-table">
                <thead>
                    <tr>
                        <th>رقم الطلب</th>
                        <th>اسم العميل</th>
                        <th>تاريخ الطلب</th>
                        <th>الإجمالي</th>
                        <th>الحالة</th>
                        <th>الإجراءات</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.RecentOrders != null && Model.RecentOrders.Any())
                    {
                        @foreach (var order in Model.RecentOrders)
                        {
                            <tr>
                                <td>#@ToArabicNumerals(order.Id.ToString())</td>
                                <td>@order.CustomerName</td>
                                <td>@order.OrderDate.ToString("g", arabicCulture)</td>
                                <td>@ToArabicNumerals(order.TotalAmount.ToString("C0", arabicCulture))</td>
                                <td>
                                    <span class="status-badge status-@order.OrderStatus.ToLower().Replace(" ", "-").Replace(" ", "")">@order.OrderStatus</span>
                                </td>
                                <td>
                                    <a asp-area="Admin" asp-controller="Orders" asp-action="Details" asp-route-id="@order.Id" class="details-link">التفاصيل</a>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr><td colspan="6" class="no-data-cell">لا توجد طلبات حديثة لعرضها.</td></tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            if (typeof Chart === 'undefined') {
                console.error("Chart.js is not loaded.");
                return;
            }

            // Function to convert numbers to Arabic numerals for chart tooltips
            const toArabicNumerals = (num) => {
                if (num === null || num === undefined) return '';
                const arabicNumerals = ['٠', '١', '٢', '٣', '٤', '٥', '٦', '٧', '٨', '٩'];
                // Use 'en-US' locale in toLocaleString to ensure standard digit grouping before replacement
                return num.toLocaleString('en-US').replace(/[0-9]/g, (d) => arabicNumerals[parseInt(d)]);
            };

            // Chart defaults
            Chart.defaults.font.family = 'Tajawal', 'sans-serif';
            Chart.defaults.color = '#d1c5c9';

            // Theme colors for charts
            const themeColors = {
                primary: '#A64B63',
                secondary: '#594A4E',
                accent: '#D98BA0',
                textPrimary: '#fceef2',
                success: '#10b981',
                warning: '#f59e0b',
                danger: '#ef4444',
                info: '#3b82f6'
            };

            // Reusable tooltip configuration factory
            const createTooltip = (currency = 'ج.م', unit = '') => ({
                backgroundColor: 'rgba(10, 25, 47, 0.85)',
                backdropFilter: 'blur(5px)',
                titleFont: { family: 'Tajawal', weight: 'bold', size: 14 },
                bodyFont: { family: 'Tajawal', size: 12 },
                padding: 12,
                cornerRadius: 8,
                displayColors: true,
                boxPadding: 4,
                rtl: true,
                callbacks: {
                    label: function(context) {
                        let value = context.parsed.y ?? context.parsed.x ?? context.parsed;
                        let label = context.dataset.label || '';
                        if (label) { label += ': '; }
                        let formattedValue = toArabicNumerals(value);
                        let finalLabel = `${label}${formattedValue}`;
                        if (unit) finalLabel += ` ${unit}`;
                        if (currency && !unit) finalLabel += ` ${currency}`;
                        return finalLabel.trim();
                    }
                }
            });

            // --- Monthly Sales Chart (Line) ---
            const monthlySalesCtx = document.getElementById('monthlySalesChart')?.getContext('2d');
            if(monthlySalesCtx) {
                const gradient = monthlySalesCtx.createLinearGradient(0, 0, 0, 300);
                gradient.addColorStop(0, 'rgba(217, 139, 160, 0.4)');
                gradient.addColorStop(1, 'rgba(10, 25, 47, 0.1)');

                new Chart(monthlySalesCtx, {
                    type: 'line',
                    data: {
                        labels: @Html.Raw(Json.Serialize(monthLabels)),
                        datasets: [{
                            label: 'إجمالي المبيعات',
                            data: @Html.Raw(Json.Serialize(Model.MonthlySalesData)),
                            backgroundColor: gradient,
                            borderColor: themeColors.accent,
                            borderWidth: 2,
                            fill: true,
                            tension: 0.4,
                            pointRadius: 0, pointHoverRadius: 6, pointBackgroundColor: themeColors.accent, pointHoverBorderColor: 'white', pointHoverBorderWidth: 2
                        }]
                    },
                    options: {
                        responsive: true, maintainAspectRatio: false,
                        plugins: { legend: { display: false }, tooltip: createTooltip() },
                        scales: { y: { display: false }, x: { grid: { display: false }, ticks: { color: '#d1c5c9' } } }
                    }
                });
            }

            // --- Daily Sales Chart (Bar) ---
            const dailySalesCtx = document.getElementById('dailySalesChart')?.getContext('2d');
            if(dailySalesCtx) {
                new Chart(dailySalesCtx, {
                    type: 'bar',
                    data: {
                        labels: @Html.Raw(Json.Serialize(dayLabels)),
                        datasets: [{
                            label: 'مبيعات اليوم',
                            data: @Html.Raw(Json.Serialize(Model.DailySalesLast7Days)),
                            backgroundColor: 'rgba(166, 75, 99, 0.5)',
                            borderRadius: 6,
                            hoverBackgroundColor: themeColors.primary,
                            borderColor: themeColors.primary,
                            borderWidth: 0,
                        }]
                    },
                    options: {
                        responsive: true, maintainAspectRatio: false,
                        plugins: { legend: { display: false }, tooltip: createTooltip() },
                        scales: { y: { display: false }, x: { grid: { display: false }, ticks: { color: '#d1c5c9' } } }
                    }
                });
            }

            // --- Category Sales Chart (Horizontal Bar) ---
            const categoryCtx = document.getElementById('categorySalesChart')?.getContext('2d');
            if(categoryCtx) {
                new Chart(categoryCtx, {
                    type: 'bar',
                    data: {
                        labels: @Html.Raw(Json.Serialize(Model.CategoryNames)),
                        datasets: [{
                            label: 'عدد القطع',
                            data: @Html.Raw(Json.Serialize(Model.CategorySalesData)),
                            backgroundColor: [ 'rgba(217, 139, 160, 0.8)', 'rgba(217, 139, 160, 0.6)', 'rgba(217, 139, 160, 0.4)', 'rgba(217, 139, 160, 0.2)' ],
                            borderWidth: 0,
                            borderRadius: 6,
                        }]
                    },
                    options: {
                        indexAxis: 'y', responsive: true, maintainAspectRatio: false,
                        plugins: { legend: { display: false }, tooltip: createTooltip('', 'قطعة') },
                        scales: { y: { grid: { display: false, drawBorder: false }, ticks: { color: '#fceef2', font: { weight: '600' } } }, x: { display: false } }
                    }
                });
            }

            // --- Order Status Chart (Doughnut) ---
            const orderStatusCtx = document.getElementById('orderStatusChart')?.getContext('2d');
            if(orderStatusCtx) {
                new Chart(orderStatusCtx, {
                    type: 'doughnut',
                    data: {
                        labels: @Html.Raw(Json.Serialize(Model.OrderStatusLabels)),
                        datasets: [{
                            data: @Html.Raw(Json.Serialize(Model.OrderStatusCounts)),
                            backgroundColor: [themeColors.info, themeColors.success, themeColors.warning, themeColors.danger, themeColors.accent],
                            borderColor: 'rgba(10, 25, 47, 0.5)',
                            borderWidth: 3,
                            hoverOffset: 12,
                        }]
                    },
                    options: {
                        responsive: true, maintainAspectRatio: false, cutout: '70%',
                        plugins: {
                            legend: { position: 'right', labels: { padding: 15, color: '#fceef2', font: { weight: '600' }, boxWidth: 12, usePointStyle: true, pointStyle: 'circle' } },
                            tooltip: createTooltip('', 'طلب')
                        }
                    }
                });
            }
        });
    </script>
}
